/* jshint node: true */
'use strict';

var EventEmitter = require('events').EventEmitter;
var util = require('util');
var request = require('hyperquest');
var uuid = require('uuid');
var extend = require('cog/extend');
var jsonparse = require('cog/jsonparse');

function JanusSession(opts) {
  if (! (this instanceof JanusSession)) {
    return new JanusSession(opts);
  }

  // initialise the id to null as this is generated by the server
  this.id = null;

  // set the uri to null
  this.uri = null;
}

util.inherits(JanusSession.prototype, EventEmitter);
module.exports = JanusSession;

var proto = JanusSession.prototype;

proto.connect = function(uri, callback) {
  var session = this;
  var transaction = uuid.v4();

  // update the url
  this.uri = uri;

  this._command('create', function(err, body) {
    if (err) {
      return callback(err);
    }

    session.id = body && body.data && body.data.id;
    callback();
  });
};

proto._command = function(command, payload, callback) {
  if (typeof payload == 'function') {
    callback = payload;
    payload = {};
  }

  return this._post(extend({}, payload, {
    janus: command,
    transaction: uuid.v4()
  }), callback);
};

['get', 'post'].forEach(function(method) {
  proto['_' + method] = function(payload, callback) {
    var req = request[method](this.uri);
    var chunks = [];

    req.setHeader('Content-Type', 'application/json');
    req.write(JSON.stringify(payload));

    req.on('response', function(res) {
      var ok = res && res.statusCode === 200;

      res.on('data', function(data) {
        chunks.push(data.toString());
      });

      res.on('end', function() {
        callback(
          ok ? null : new Error('invalid request: ' + res.statusCode),
          jsonparse(chunks.join(''))
        );
      });
    });

    req.end();

  };
})